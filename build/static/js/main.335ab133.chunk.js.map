{"version":3,"sources":["Components/Navbar.js","Pages/home.js","Pages/login.js","Pages/signup.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","AppBar","Toolbar","className","Button","color","component","Link","to","Component","home","state","screams","axios","get","then","res","console","log","data","setState","catch","err","recentPosts","this","map","scream","body","Grid","container","spacing","item","sm","xs","Login","signup","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","useNextVariants","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uQAuBeA,EAdf,uKAEQ,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,UAAU,iBACf,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,UAAWC,IAAMC,GAAG,UAA5C,SACA,kBAACJ,EAAA,EAAD,CAAQC,MAAM,UAAUC,UAAWC,IAAMC,GAAG,KAA5C,QACA,kBAACJ,EAAA,EAAD,CAAQC,MAAM,UAAUC,UAAWC,IAAMC,GAAG,WAA5C,gBAPpB,GAA4BC,a,0BC+BbC,E,4MAnCXC,MAAQ,CACJC,QAAS,M,kEAEO,IAAD,OACfC,IAAMC,IAAI,YACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,SAAS,CACVR,QAASI,EAAIG,UAGpBE,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,Q,+BAI9B,IAAIC,EAAcC,KAAKb,MAAMC,QACzBY,KAAKb,MAAMC,QAAQa,KAAI,SAACC,GAAD,OAAY,2BAAIA,EAAOC,SAG9C,wCAEJ,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,IACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACjBV,EADL,KAGA,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IAClB,+C,GA5BDxB,aCQJyB,EAVf,uKAEQ,OACI,6BACG,+CAJf,GAA2BzB,aCUZ0B,EAVf,uKAEQ,OACI,6BACG,gDAJf,GAA4B1B,aCQtB2B,EAAQC,IAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,SAGlBE,WAAY,CACVC,iBAAiB,KAuBNC,MAnBf,WACE,OACE,kBAAC,IAAD,CAAkBX,MAAOA,GACvB,yBAAKjC,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,yBAAKA,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,IAAI3C,UAAWI,IACjC,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,SAAS3C,UAAW4B,IACtC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,UAAU3C,UAAW6B,UC5BjCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd3C,OAAM,SAAA4C,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.335ab133.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\n\n\n\nexport class Navbar extends Component {\n    render() {\n        return (\n            <AppBar>\n                <Toolbar className=\"nav-container\">\n                    <Button color=\"inherit\" component={Link} to=\"/login\">Login</Button>\n                    <Button color=\"inherit\" component={Link} to=\"/\">Home</Button>\n                    <Button color=\"inherit\" component={Link} to=\"/signup\">SignUp</Button>\n                </Toolbar>\n            </AppBar>\n        );\n    }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\n\nclass home extends Component {\n    state = {\n        screams: null\n    }\n    componentDidMount(){\n        axios.get('/screams')\n            .then(res => {\n                console.log(res.data)//log data that is recieved\n                this.setState({\n                    screams: res.data\n                })\n            })\n            .catch(err => console.log(err));\n    }\n    render() {\n        //create func to show recentPosts\n        let recentPosts = this.state.screams ? (\n            this.state.screams.map((scream) => <p>{scream.body}</p>)\n        //else\n        ) : (\n            <p>Loading..</p>\n        );\n        return (\n            <Grid container spacing={16}>\n                <Grid item sm={8} xs={12}>\n                    {recentPosts} {/* Content  */}\n                </Grid>\n                <Grid item sm={4} xs={12}>\n                    <p>Profile...</p>\n                </Grid>\n\n            </Grid>\n        );\n    }\n}\n\nexport default home;\n","import React, { Component } from 'react'\n\nexport class Login extends Component {\n    render() {\n        return (\n            <div>\n               <h1>Login Page</h1> \n            </div>\n        )\n    }\n}\n\nexport default Login","import React, { Component } from 'react'\n\nexport class signup extends Component {\n    render() {\n        return (\n            <div>\n               <h1>SignUp Page</h1> \n            </div>\n        )\n    }\n}\n\nexport default signup","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\nimport Navbar from './Components/Navbar';\nimport home from './Pages/home';\nimport Login from './Pages/login';\nimport signup from './Pages/signup';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#33c9dc',\n      main: '#00bcd4',\n      dark: '#008394',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ff6333',\n      main: '#ff3d00',\n      dark: '#b22a00',\n      contrastText: '#fff'\n    }\n  },\n  typography: {\n    useNextVariants: true\n  }\n});  \n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Router>\n        <Navbar />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={signup} />\n            </Switch>\n          </div>\n        </Router>\n    </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}