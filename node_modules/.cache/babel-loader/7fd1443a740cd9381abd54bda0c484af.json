{"ast":null,"code":"//Import types\nimport { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED, LOADING_USER, LIKE_SCREAM, UNLIKE_SCREAM, MARK_NOTIFICATIONS_READ } from '../types'; //create object of state\n\nconst initialState = {\n  authenticated: false,\n  // loading: false,\n  credentials: {},\n  likes: [],\n  notifications: []\n}; //func to handle userState\n\nexport default function (state = initialState, action) {\n  //if authenticated\n  switch (action.type) {\n    case SET_AUTHENTICATED:\n      return { ...state,\n        authenticated: true\n      };\n    //if not authenticated\n\n    case SET_UNAUTHENTICATED:\n      return initialState;\n    //if set_user action called, set auth to true and get data\n\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload\n      };\n    //\n\n    case LOADING_USER:\n      return { ...state,\n        loading: true\n      };\n\n    case LIKE_SCREAM:\n      return { ...state,\n        likes: [...state.likes, {\n          userHandle: state.credentials.handle,\n          screamId: action.payload.screamId\n        }]\n      };\n\n    case UNLIKE_SCREAM:\n      return { ...state,\n        likes: state.likes.filter(like => like.screamId !== action.payload.screamId)\n      };\n\n    case MARK_NOTIFICATIONS_READ:\n      state.notifications.forEach(not => not.read = true);\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Mama/Desktop/pizza-app/src/Redux/reducers/userReducer.js"],"names":["SET_USER","SET_AUTHENTICATED","SET_UNAUTHENTICATED","LOADING_USER","LIKE_SCREAM","UNLIKE_SCREAM","MARK_NOTIFICATIONS_READ","initialState","authenticated","credentials","likes","notifications","state","action","type","loading","payload","userHandle","handle","screamId","filter","like","forEach","not","read"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,iBAAnB,EAAsCC,mBAAtC,EAA2DC,YAA3D,EAAyEC,WAAzE,EAAsFC,aAAtF,EAAqGC,uBAArG,QAAoI,UAApI,C,CAEE;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnB;AACAC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,KAAK,EAAE,EAJY;AAKnBC,EAAAA,aAAa,EAAE;AALI,CAArB,C,CAQA;;AACA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAuC;AAClD;AACF,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,iBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,aAAa,EAAE;AAFV,OAAP;AAIA;;AACF,SAAKN,mBAAL;AACE,aAAOK,YAAP;AACA;;AACF,SAAKP,QAAL;AACE,aAAO;AACLQ,QAAAA,aAAa,EAAE,IADV;AAELO,QAAAA,OAAO,EAAE,KAFJ;AAGL,WAAGF,MAAM,CAACG;AAHL,OAAP;AAKA;;AACF,SAAKb,YAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKX,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,KAAK,EAAE,CACL,GAAGE,KAAK,CAACF,KADJ,EAEL;AACEO,UAAAA,UAAU,EAAEL,KAAK,CAACH,WAAN,CAAkBS,MADhC;AAEEC,UAAAA,QAAQ,EAAEN,MAAM,CAACG,OAAP,CAAeG;AAF3B,SAFK;AAFF,OAAP;;AAUF,SAAKd,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYU,MAAZ,CACJC,IAAD,IAAUA,IAAI,CAACF,QAAL,KAAkBN,MAAM,CAACG,OAAP,CAAeG,QADtC;AAFF,OAAP;;AAMF,SAAKb,uBAAL;AACEM,MAAAA,KAAK,CAACD,aAAN,CAAoBW,OAApB,CAA6BC,GAAD,IAAUA,GAAG,CAACC,IAAJ,GAAW,IAAjD;AACA,aAAO,EACL,GAAGZ;AADE,OAAP;;AAGF;AACE,aAAOA,KAAP;AA9CJ;AAgDD","sourcesContent":["//Import types\nimport { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED, LOADING_USER, LIKE_SCREAM, UNLIKE_SCREAM, MARK_NOTIFICATIONS_READ } from '../types';\n  \n  //create object of state\n  const initialState = {\n    authenticated: false,\n    // loading: false,\n    credentials: {},\n    likes: [],\n    notifications: []\n  };\n  \n  //func to handle userState\n  export default function(state = initialState, action) {\n      //if authenticated\n    switch (action.type) {\n      case SET_AUTHENTICATED:\n        return {\n          ...state,\n          authenticated: true\n        };\n        //if not authenticated\n      case SET_UNAUTHENTICATED:\n        return initialState;\n        //if set_user action called, set auth to true and get data\n      case SET_USER:\n        return {\n          authenticated: true,\n          loading: false,\n          ...action.payload\n        };\n        //\n      case LOADING_USER:\n        return {\n          ...state,\n          loading: true\n        };\n      case LIKE_SCREAM:\n        return {\n          ...state,\n          likes: [\n            ...state.likes,\n            {\n              userHandle: state.credentials.handle,\n              screamId: action.payload.screamId\n            }\n          ]\n        };\n      case UNLIKE_SCREAM:\n        return {\n          ...state,\n          likes: state.likes.filter(\n            (like) => like.screamId !== action.payload.screamId\n          )\n        };\n      case MARK_NOTIFICATIONS_READ:\n        state.notifications.forEach((not) => (not.read = true));\n        return {\n          ...state\n        };\n      default:\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}