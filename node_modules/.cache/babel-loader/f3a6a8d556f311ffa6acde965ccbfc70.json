{"ast":null,"code":"var _jsxFileName = \"/Users/Mama/Desktop/fakeTwitter/src/Components/Post/PostDialog.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport themeObject from '../../Util/theme';\nimport MyButton from '../../Util/MyButton';\nimport LikeButton from './LikeButton';\nimport Comments from './Comments';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { Link } from 'react-router-dom'; // MUI Stuff\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'; // Icons\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\nimport ChatIcon from '@material-ui/icons/Chat'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { getScream, clearErrors } from '../../Redux/actions/dataActions';\n\nconst styles = theme => ({ ...themeObject,\n  profileImage: {\n    maxWidth: 200,\n    height: 200,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  dialogContent: {\n    padding: 20\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  expandButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  spinnerDiv: {\n    textAlign: 'center',\n    marginTop: 50,\n    marginBottom: 50\n  }\n});\n\nclass PostDialog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      oldPath: '',\n      newPath: ''\n    };\n\n    this.handleOpen = () => {\n      //create var for old path\n      let oldPath = window.location.pathname; //get var passed down by props fom scream state\n\n      const {\n        userHandle,\n        screamId\n      } = this.props; //create var to store new url path \n\n      const newPath = `/users/${userHandle}/scream/${screamId}`;\n      if (oldPath === newPath) oldPath = `/users/${userHandle}`;\n      window.history.pushState(null, null, newPath);\n      this.setState({\n        open: true,\n        oldPath,\n        newPath\n      });\n      this.props.getScream(this.props.screamId);\n    };\n\n    this.handleClose = () => {\n      window.history.pushState(null, null, this.state.oldPath);\n      this.setState({\n        open: false\n      }); //clear errors everytime user clicks close\n\n      this.props.clearErrors();\n    };\n  }\n\n  //check if you have openDialog\n  componentDidMount() {\n    if (this.props.openDialog) {\n      this.handleOpen();\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      scream: {\n        screamId,\n        body,\n        createdAt,\n        likeCount,\n        commentCount,\n        userImage,\n        userHandle,\n        comments\n      },\n      UI: {\n        loading\n      }\n    } = this.props;\n    const dialogMarkup = loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.spinnerDiv,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 200,\n      thickness: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: userImage,\n      alt: \"Profile\",\n      className: classes.profileImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: Link,\n      color: \"primary\",\n      variant: \"h5\",\n      to: `/users/${userHandle}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"@\", userHandle), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.invisibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, dayjs(createdAt).format('h:mm a, MMMM DD YYYY')), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.invisibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, body), /*#__PURE__*/React.createElement(LikeButton, {\n      screamId: screamId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, likeCount, \" likes\"), /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ChatIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, commentCount, \" comments\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.visibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CommentForm, {\n      screamId: screamId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Comments, {\n      comments: comments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MyButton, {\n      onClick: this.handleOpen,\n      tip: \"Expand scream\",\n      tipClassName: classes.expandButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(UnfoldMore, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      tipClassName: classes.closeButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(DialogContent, {\n      className: classes.dialogContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, dialogMarkup)));\n  }\n\n}\n\nPostDialog.propTypes = {\n  clearErrors: PropTypes.func.isRequired,\n  getScream: PropTypes.func.isRequired,\n  screamId: PropTypes.string.isRequired,\n  userHandle: PropTypes.string.isRequired,\n  scream: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  scream: state.data.scream,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getScream,\n  clearErrors\n};\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(PostDialog));","map":{"version":3,"sources":["/Users/Mama/Desktop/fakeTwitter/src/Components/Post/PostDialog.js"],"names":["React","Component","Fragment","PropTypes","withStyles","themeObject","MyButton","LikeButton","Comments","CommentForm","dayjs","Link","Dialog","DialogContent","CircularProgress","Grid","Typography","CloseIcon","UnfoldMore","ChatIcon","connect","getScream","clearErrors","styles","theme","profileImage","maxWidth","height","borderRadius","objectFit","dialogContent","padding","closeButton","position","left","expandButton","spinnerDiv","textAlign","marginTop","marginBottom","PostDialog","state","open","oldPath","newPath","handleOpen","window","location","pathname","userHandle","screamId","props","history","pushState","setState","handleClose","componentDidMount","openDialog","render","classes","scream","body","createdAt","likeCount","commentCount","userImage","comments","UI","loading","dialogMarkup","invisibleSeparator","format","visibleSeparator","propTypes","func","isRequired","string","object","mapStateToProps","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport themeObject from '../../Util/theme';\nimport MyButton from '../../Util/MyButton';\nimport LikeButton from './LikeButton';\nimport Comments from './Comments';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { Link } from 'react-router-dom';\n// MUI Stuff\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n// Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\nimport ChatIcon from '@material-ui/icons/Chat';\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { getScream, clearErrors } from '../../Redux/actions/dataActions';\n\nconst styles = (theme) => ({\n  ...themeObject,\n  profileImage: {\n    maxWidth: 200,\n    height: 200,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  dialogContent: {\n    padding: 20\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  expandButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  spinnerDiv: {\n    textAlign: 'center',\n    marginTop: 50,\n    marginBottom: 50\n  }\n});\n\nclass PostDialog extends Component {\n  state = {\n    open: false,\n    oldPath: '',\n    newPath: ''\n  };\n  //check if you have openDialog\n  componentDidMount() {\n    if (this.props.openDialog) {\n      this.handleOpen();\n    }\n  }\n  handleOpen = () => {\n    //create var for old path\n    let oldPath = window.location.pathname;\n\n    //get var passed down by props fom scream state\n    const { userHandle, screamId } = this.props;\n\n    //create var to store new url path \n    const newPath = `/users/${userHandle}/scream/${screamId}`;\n\n    if (oldPath === newPath) oldPath = `/users/${userHandle}`;\n\n    window.history.pushState(null, null, newPath);\n\n    this.setState({ open: true, oldPath, newPath });\n    this.props.getScream(this.props.screamId);\n  };\n  handleClose = () => {\n    window.history.pushState(null, null, this.state.oldPath);\n    this.setState({ open: false });\n    //clear errors everytime user clicks close\n    this.props.clearErrors();\n  };\n\n  render() {\n\n    const {\n      classes,\n      scream: { screamId, body, createdAt, likeCount, commentCount, userImage, userHandle, comments},\n      UI: { loading }\n    } = this.props;\n\n    const dialogMarkup = loading ? (\n      <div className={classes.spinnerDiv}>\n        <CircularProgress size={200} thickness={2} />\n      </div>\n    ) : (\n      <Grid container spacing={16}>\n        <Grid item sm={5}>\n          <img src={userImage} alt=\"Profile\" className={classes.profileImage} />\n        </Grid>\n        <Grid item sm={7}>\n          <Typography\n            component={Link}\n            color=\"primary\"\n            variant=\"h5\"\n            to={`/users/${userHandle}`}\n          >\n            @{userHandle}\n          </Typography>\n          <hr className={classes.invisibleSeparator} />\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\n          </Typography>\n          <hr className={classes.invisibleSeparator} />\n          <Typography variant=\"body1\">{body}</Typography>\n          <LikeButton screamId={screamId} />\n          <span>{likeCount} likes</span>\n          <MyButton tip=\"comments\">\n            <ChatIcon color=\"primary\" />\n          </MyButton>\n          <span>{commentCount} comments</span>\n        </Grid>\n        <hr className={classes.visibleSeparator} />\n        <CommentForm screamId={screamId} />\n        <Comments comments={comments} />\n      </Grid>\n    );\n    return (\n      <Fragment>\n        <MyButton\n          onClick={this.handleOpen}\n          tip=\"Expand scream\"\n          tipClassName={classes.expandButton}\n        >\n          <UnfoldMore color=\"primary\" />\n        </MyButton>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          fullWidth\n          maxWidth=\"sm\"\n        >\n          <MyButton\n            tip=\"Close\"\n            onClick={this.handleClose}\n            tipClassName={classes.closeButton}\n          >\n            <CloseIcon />\n          </MyButton>\n          <DialogContent className={classes.dialogContent}>\n            {dialogMarkup}\n          </DialogContent>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostDialog.propTypes = {\n  clearErrors: PropTypes.func.isRequired,\n  getScream: PropTypes.func.isRequired,\n  screamId: PropTypes.string.isRequired,\n  userHandle: PropTypes.string.isRequired,\n  scream: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  scream: state.data.scream,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getScream,\n  clearErrors\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(PostDialog));"]},"metadata":{},"sourceType":"module"}