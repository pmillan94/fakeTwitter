{"ast":null,"code":"import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED, LOADING_USER, MARK_NOTIFICATIONS_READ } from '../types';\nimport axios from 'axios'; //func to loginUser\n\nexport const loginUser = (userData, history) => dispatch => {\n  //dispatch loading\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/login', userData).then(res => {\n    //if successful, set Auth Header\n    setAuthorizationHeader(res.data.token); //getUser\n\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    }); //send user to home page\n\n    history.push('/');\n  }).catch(err => {\n    //if errors, log error and set loading to false\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //func to signUp\n\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/signup', newUserData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push('/');\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //func to logout\n\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('FBIdToken');\n  delete axios.defaults.headers.common['Authorization'];\n  dispatch({\n    type: SET_UNAUTHENTICATED\n  });\n}; //func to getUserData\n\nexport const getUserData = () => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.get('/user').then(res => {\n    dispatch({\n      type: SET_USER,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; //func to setAuthorizationHeader\n\nconst setAuthorizationHeader = token => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};","map":{"version":3,"sources":["/Users/Mama/Desktop/pizza-app/src/Redux/actions/userActions.js"],"names":["SET_USER","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_UNAUTHENTICATED","LOADING_USER","MARK_NOTIFICATIONS_READ","axios","loginUser","userData","history","dispatch","type","post","then","res","setAuthorizationHeader","data","token","getUserData","push","catch","err","payload","response","signupUser","newUserData","logoutUser","localStorage","removeItem","defaults","headers","common","get","console","log","FBIdToken","setItem"],"mappings":"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","sourcesContent":["import {\n    SET_USER,\n    SET_ERRORS,\n    CLEAR_ERRORS,\n    LOADING_UI,\n    SET_UNAUTHENTICATED,\n    LOADING_USER,\n    MARK_NOTIFICATIONS_READ\n  } from '../types';\n  import axios from 'axios';\n\n\n//func to loginUser\nexport const loginUser = (userData, history) => (dispatch) => {\n//dispatch loading\ndispatch({ type: LOADING_UI });\naxios\n    .post('/login', userData)\n    .then((res) => {\n    //if successful, set Auth Header\n    setAuthorizationHeader(res.data.token);\n    //getUser\n    dispatch(getUserData());\n\n    dispatch({ type: CLEAR_ERRORS });\n    //send user to home page\n    history.push('/');\n    })\n    .catch((err) => {\n        //if errors, log error and set loading to false\n    dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n    });\n    });\n};\n\n//func to signUp\nexport const signupUser = (newUserData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .post('/signup', newUserData)\n      .then((res) => {\n        setAuthorizationHeader(res.data.token);\n        dispatch(getUserData());\n        dispatch({ type: CLEAR_ERRORS });\n        history.push('/');\n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  };\n\n//func to logout\nexport const logoutUser = () => (dispatch) => {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({ type: SET_UNAUTHENTICATED });\n};\n\n//func to getUserData\nexport const getUserData = () => (dispatch) => {\ndispatch({ type: LOADING_USER });\naxios\n    .get('/user')\n    .then((res) => {\n    dispatch({\n        type: SET_USER,\n        payload: res.data\n    });\n    })\n    .catch((err) => console.log(err));\n};\n\n\n//func to setAuthorizationHeader\nconst setAuthorizationHeader = (token) => {\n    const FBIdToken = `Bearer ${token}`;\n    localStorage.setItem('FBIdToken', FBIdToken);\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\n};"]},"metadata":{},"sourceType":"module"}