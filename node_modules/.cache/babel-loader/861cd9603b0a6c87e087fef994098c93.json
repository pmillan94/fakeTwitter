{"ast":null,"code":"import { SET_SCREAMS, LOADING_DATA, LIKE_SCREAM, UNLIKE_SCREAM, DELETE_SCREAM, SET_ERRORS, POST_SCREAM, CLEAR_ERRORS, LOADING_UI, SET_SCREAM, STOP_LOADING_UI, SUBMIT_COMMENT } from '../types';\nimport axios from 'axios'; //func to Get all screams\n\nexport const getScreams = () => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/screams').then(res => {\n    dispatch({\n      type: SET_SCREAMS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_SCREAMS,\n      payload: []\n    });\n  });\n}; //func to get specific scream\n\nexport const getScream = screamId => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/scream/${screamId}`).then(res => {\n    dispatch({\n      type: SET_SCREAM,\n      payload: res.data\n    });\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  }).catch(err => console.log(err));\n}; // Post a scream\n\nexport const postScream = newScream => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/scream', newScream).then(res => {\n    dispatch({\n      type: POST_SCREAM,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Like a scream\n\nexport const likeScream = screamId => dispatch => {\n  axios.get(`/scream/${screamId}/like`).then(res => {\n    dispatch({\n      type: LIKE_SCREAM,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Unlike a scream\n\nexport const unlikeScream = screamId => dispatch => {\n  axios.get(`/scream/${screamId}/unlike`).then(res => {\n    dispatch({\n      type: UNLIKE_SCREAM,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Submit a comment\n\nexport const submitComment = (screamId, commentData) => dispatch => {\n  axios.post(`/scream/${screamId}/comment`, commentData).then(res => {\n    dispatch({\n      type: SUBMIT_COMMENT,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const deleteScream = screamId => dispatch => {\n  axios.delete(`/scream/${screamId}`).then(() => {\n    dispatch({\n      type: DELETE_SCREAM,\n      payload: screamId\n    });\n  }).catch(err => console.log(err));\n};\nexport const getUserData = userHandle => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get(`/user/${userHandle}`).then(res => {\n    dispatch({\n      type: SET_SCREAMS,\n      payload: res.data.screams\n    });\n  }).catch(() => {\n    dispatch({\n      type: SET_SCREAMS,\n      payload: null\n    });\n  });\n}; //func to clearErrors\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Users/Mama/Desktop/pizza-app/src/Redux/actions/dataActions.js"],"names":["SET_SCREAMS","LOADING_DATA","LIKE_SCREAM","UNLIKE_SCREAM","DELETE_SCREAM","SET_ERRORS","POST_SCREAM","CLEAR_ERRORS","LOADING_UI","SET_SCREAM","STOP_LOADING_UI","SUBMIT_COMMENT","axios","getScreams","dispatch","type","get","then","res","payload","data","catch","err","getScream","screamId","console","log","postScream","newScream","post","clearErrors","response","likeScream","unlikeScream","submitComment","commentData","deleteScream","delete","getUserData","userHandle","screams"],"mappings":"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","sourcesContent":["import { SET_SCREAMS, LOADING_DATA, LIKE_SCREAM, UNLIKE_SCREAM, DELETE_SCREAM, SET_ERRORS, POST_SCREAM, CLEAR_ERRORS, LOADING_UI,\n    SET_SCREAM, STOP_LOADING_UI, SUBMIT_COMMENT } from '../types';\n  import axios from 'axios';\n \n  \n//func to Get all screams\nexport const getScreams = () => (dispatch) => {\n    dispatch({ type: LOADING_DATA });\n    axios\n        .get('/screams')\n        .then((res) => {\n          dispatch({\n              type: SET_SCREAMS,\n              payload: res.data\n          });\n        })\n        .catch((err) => {\n        dispatch({\n            type: SET_SCREAMS,\n            payload: []\n        });\n    });\n};\n\n//func to get specific scream\nexport const getScream = (screamId) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n        .get(`/scream/${screamId}`)\n        .then((res) => {\n        dispatch({\n            type: SET_SCREAM,\n            payload: res.data\n        });\n        dispatch({ type: STOP_LOADING_UI });\n    })\n    .catch((err) => console.log(err));\n};\n\n\n  // Post a scream\n  export const postScream = (newScream) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .post('/scream', newScream)\n      .then((res) => {\n        dispatch({\n          type: POST_SCREAM,\n          payload: res.data\n        });\n        dispatch(clearErrors());\n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  };\n\n\n// Like a scream\nexport const likeScream = (screamId) => (dispatch) => {\n    axios\n        .get(`/scream/${screamId}/like`)\n        .then((res) => {\n            dispatch({\n            type: LIKE_SCREAM,\n            payload: res.data\n        });\n    })\n    .catch((err) => console.log(err));\n};\n\n  // Unlike a scream\n  export const unlikeScream = (screamId) => (dispatch) => {\n    axios\n      .get(`/scream/${screamId}/unlike`)\n      .then((res) => {\n        dispatch({\n          type: UNLIKE_SCREAM,\n          payload: res.data\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // Submit a comment\n  export const submitComment = (screamId, commentData) => (dispatch) => {\n    axios\n      .post(`/scream/${screamId}/comment`, commentData)\n      .then((res) => {\n        dispatch({\n          type: SUBMIT_COMMENT,\n          payload: res.data\n        });\n        dispatch(clearErrors());\n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  };\n\n  export const deleteScream = (screamId) => (dispatch) => {\n    axios\n      .delete(`/scream/${screamId}`)\n      .then(() => {\n        dispatch({ type: DELETE_SCREAM, payload: screamId });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  \n  export const getUserData = (userHandle) => (dispatch) => {\n    dispatch({ type: LOADING_DATA });\n    axios\n      .get(`/user/${userHandle}`)\n      .then((res) => {\n        dispatch({\n          type: SET_SCREAMS,\n          payload: res.data.screams\n        });\n      })\n      .catch(() => {\n        dispatch({\n          type: SET_SCREAMS,\n          payload: null\n        });\n      });\n  };\n  \n \n//func to clearErrors\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n};"]},"metadata":{},"sourceType":"module"}