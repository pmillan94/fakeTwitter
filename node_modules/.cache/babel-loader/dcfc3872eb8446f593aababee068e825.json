{"ast":null,"code":"var _jsxFileName = \"/Users/Mama/Desktop/pizza-app/src/Pages/login.js\";\nimport React, { Component } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport PropTypes from 'prop-types';\nimport Icon from '../Images/no-img.png';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from \"@material-ui/core/Button\";\nconst styles = {\n  form: {\n    textAlign: 'center'\n  },\n  iconImg: {\n    width: 'auto',\n    height: '4rem',\n    margin: '20px auto 20px auto'\n  },\n  pageTitle: {\n    margin: '10px auto 10px auto'\n  },\n  textField: {\n    margin: '10px auto 10px auto'\n  },\n  button: {\n    marginTop: '1rem'\n  },\n  customError: {\n    color: 'red',\n    fontSize: '0.8rem',\n    marginTop: '1rem'\n  }\n};\n\nclass Login extends Component {\n  //controled component\n  constructor() {\n    super();\n\n    this.handleSubmit = event => {\n      //prevent user from submitting empty values\n      event.preventDefault(); //while everything is processing show loading\n\n      this.setState({\n        loading: true\n      }); //Get data before submitting\n\n      const userData = {\n        email: this.state.email,\n        password: this.state.password\n      };\n      axios.post('/login', userData).then(res => {\n        //if successful\n        console.log(res.data); //set loading screen to false\n\n        this.setState({\n          loading: false\n        }); //send users to homepage\n\n        this.props.history.push('/');\n      }).catch(err => {\n        //if errors, log error and set loading to false\n        this.setState({\n          errors: err.response.data,\n          loading: false\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: '',\n      loading: false,\n      error: {}\n    };\n  } //func to handle once user clicks submit\n\n\n  render() {\n    //import classes\n    const {\n      classes\n    } = this.props;\n    const {\n      errors,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: Icon,\n      alt: \"NewUser\",\n      className: classes.iconImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h2\",\n      className: classes.pageTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      className: classes.textField // helperText={errors.email}\n      // error={errors.email ? true : false}\n      ,\n      value: this.state.email,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"password\",\n      name: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      className: classes.textField // helperText={errors.password}\n      // error={errors.password ? true : false}\n      ,\n      value: this.state.password,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }), errors.general && /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h2\",\n      className: classes.customError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }, errors.general), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, \"Login\"))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nLogin.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Login);","map":{"version":3,"sources":["/Users/Mama/Desktop/pizza-app/src/Pages/login.js"],"names":["React","Component","withStyles","PropTypes","Icon","axios","Grid","Typography","TextField","Button","styles","form","textAlign","iconImg","width","height","margin","pageTitle","textField","button","marginTop","customError","color","fontSize","Login","constructor","handleSubmit","event","preventDefault","setState","loading","userData","email","state","password","post","then","res","console","log","data","props","history","push","catch","err","errors","response","handleChange","target","name","value","error","render","classes","general","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport PropTypes from 'prop-types';\nimport Icon from '../Images/no-img.png';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = {\n    form: {\n        textAlign: 'center'\n    },\n    iconImg: {\n        width: 'auto',\n        height: '4rem',\n        margin: '20px auto 20px auto'\n    },\n    pageTitle: {\n        margin: '10px auto 10px auto'\n    },\n    textField: {\n        margin: '10px auto 10px auto'\n    },\n    button: {\n        marginTop: '1rem',\n    },\n    customError: {\n        color: 'red',\n        fontSize: '0.8rem',\n        marginTop: '1rem',\n\n    }\n};\n\n\nclass Login extends Component {\n    //controled component\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            loading: false,\n            error: {}\n        };\n    }\n\n    //func to handle once user clicks submit\n    handleSubmit = (event) => {\n        //prevent user from submitting empty values\n        event.preventDefault();\n        //while everything is processing show loading\n        this.setState({\n            loading: true\n        });\n\n        //Get data before submitting\n        const userData = {\n            email: this.state.email,\n            password: this.state.password\n        }\n\n        axios.post('/login', userData)\n            .then(res => {\n                //if successful\n                console.log(res.data);\n                //set loading screen to false\n                this.setState({\n                    loading: false\n                });\n                //send users to homepage\n                this.props.history.push('/');\n            })\n            .catch(err => {\n                //if errors, log error and set loading to false\n                this.setState({\n                    errors: err.response.data,\n                    loading: false\n                });\n            });\n    };\n\n    //func to handleChnage in Textfields and get user input\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n\n    render() {\n        //import classes\n        const { classes } = this.props;\n        const { errors, loading } = this.state;\n\n        return (\n            <Grid container className={classes.form}>\n                <Grid item sm/>\n                <Grid item sm>\n                    <img src={Icon} alt=\"NewUser\" className={classes.iconImg}/>\n                    <Typography variant=\"h2\" className={classes.pageTitle}>Login</Typography>\n                    <form noValidate onSubmit={this.handleSubmit} >\n                        <TextField \n                            id=\"email\"\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            className={classes.textField}\n                            // helperText={errors.email}\n                            // error={errors.email ? true : false}\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                            fullWidth \n                        />\n                        <TextField \n                            id=\"password\" \n                            name=\"password\" \n                            type=\"password\" \n                            label=\"Password\" \n                            className={classes.textField}\n                            // helperText={errors.password}\n                            // error={errors.password ? true : false}\n                            value={this.state.password} \n                            onChange={this.handleChange} \n                            fullWidth \n                        />\n                        {errors.general && (\n                            <Typography variant=\"h2\" className={classes.customError}>\n                                {errors.general}\n                            </Typography>\n                        )}\n                        <Button \n                            type=\"submit\" \n                            variant=\"contained\" \n                            color=\"primary\" \n                            className={classes.button}>\n                            Login\n                        </Button>                      \n                    </form> \n                </Grid>\n                <Grid item sm/> \n            </Grid>\n        )\n    }\n}\n\nLogin.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(Login);"]},"metadata":{},"sourceType":"module"}