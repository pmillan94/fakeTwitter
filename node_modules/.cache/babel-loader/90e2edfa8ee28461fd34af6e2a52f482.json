{"ast":null,"code":"var _jsxFileName = \"/Users/Mama/Desktop/fakeTwitter/src/Components/Layout/Notifications.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types'; // MUI stuff\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge'; // Icons\n\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat'; // Redux\n\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../../Redux/actions/userActions';\n\nclass Notifications extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anchorEl: null\n    };\n\n    this.handleOpen = event => {\n      //update state \n      this.setState({\n        anchorEl: event.target\n      });\n    };\n\n    this.handleClose = () => {\n      //once user view Notifications, setState to null\n      this.setState({\n        anchorEl: null\n      });\n    };\n\n    this.onMenuOpened = () => {\n      let unreadNotificationsIds = this.props.notifications.filter(not => !not.read).map(not => not.notificationId);\n      this.props.markNotificationsRead(unreadNotificationsIds);\n    };\n  }\n\n  render() {\n    //create var from var in props\n    const notifications = this.props.notifications;\n    const anchorEl = this.state.anchorEl;\n    dayjs.extend(relativeTime);\n    let notificationsIcon; //if there notifications, and are more than 0\n\n    if (notifications && notifications.length > 0) {\n      //filter notifications to return only the unread ones\n      notifications.filter(not => not.read === false).length > 0 //set badge to icon\n      ? notificationsIcon =\n      /*#__PURE__*/\n      //set number to badge by the number of unread notifications\n      React.createElement(Badge, {\n        badgeContent: notifications.filter(not => not.read === false).length,\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }\n      })) : //else return the regular notificationsIcon withOut badges\n      notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 32\n        }\n      });\n    } else {\n      //else if you have no notifications, show notification icon\n      notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 27\n        }\n      });\n    }\n\n    let notificationsMarkup = notifications && notifications.length > 0 ? notifications.map(not => {\n      const verb = not.type === 'like' ? 'liked' : 'commented on';\n      const time = dayjs(not.createdAt).fromNow();\n      const iconColor = not.read ? 'primary' : 'secondary';\n      const icon = not.type === 'like' ? /*#__PURE__*/React.createElement(FavoriteIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(ChatIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }\n      });\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        key: not.createdAt,\n        onClick: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, icon, /*#__PURE__*/React.createElement(Typography, {\n        component: Link,\n        color: \"default\",\n        variant: \"body1\",\n        to: `/users/${not.recipient}/scream/${not.screamId}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }, not.sender, \" \", verb, \" your scream \", time));\n    }) : /*#__PURE__*/React.createElement(MenuItem, {\n      onClick: this.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \"You have no notifications yet\");\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"top\",\n      title: \"Notifications\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-owns\": anchorEl ? 'simple-menu' : undefined,\n      \"aria-haspopup\": \"true\",\n      onClick: this.handleOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, notificationsIcon)), /*#__PURE__*/React.createElement(Menu, {\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: this.handleClose,\n      onEntered: this.onMenuOpened,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, notificationsMarkup));\n  }\n\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(mapStateToProps, {\n  markNotificationsRead\n})(Notifications);","map":{"version":3,"sources":["/Users/Mama/Desktop/fakeTwitter/src/Components/Layout/Notifications.js"],"names":["React","Component","Fragment","Link","dayjs","relativeTime","PropTypes","Menu","MenuItem","IconButton","Tooltip","Typography","Badge","NotificationsIcon","FavoriteIcon","ChatIcon","connect","markNotificationsRead","Notifications","state","anchorEl","handleOpen","event","setState","target","handleClose","onMenuOpened","unreadNotificationsIds","props","notifications","filter","not","read","map","notificationId","render","extend","notificationsIcon","length","notificationsMarkup","verb","type","time","createdAt","fromNow","iconColor","icon","marginRight","recipient","screamId","sender","undefined","Boolean","propTypes","func","isRequired","array","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\n// MUI stuff\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\n// Icons\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat';\n// Redux\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../../Redux/actions/userActions';\n\nclass Notifications extends Component {\n  //create a state\n  state = {\n    anchorEl: null\n  };\n\n  //func that handles what happens when user presses notification btn\n  handleOpen = (event) => {\n    //update state \n    this.setState({ anchorEl: event.target });\n  };\n\n  //func that handles what happens when user closes notification btn\n  handleClose = () => {\n    //once user view Notifications, setState to null\n    this.setState({ anchorEl: null });\n  };\n\n  //\n  onMenuOpened = () => {\n    let unreadNotificationsIds = this.props.notifications\n      .filter((not) => !not.read)\n      .map((not) => not.notificationId);\n    this.props.markNotificationsRead(unreadNotificationsIds);\n  };\n\n  render() {\n    //create var from var in props\n    const notifications = this.props.notifications;\n    const anchorEl = this.state.anchorEl;\n\n    dayjs.extend(relativeTime);\n\n    let notificationsIcon;\n\n    //if there notifications, and are more than 0\n    if (notifications && notifications.length > 0) {\n      //filter notifications to return only the unread ones\n      notifications.filter((not) => not.read === false).length > 0\n        //set badge to icon\n        ? (notificationsIcon = (\n            //set number to badge by the number of unread notifications\n            <Badge badgeContent={\n                notifications.filter((not) => not.read === false).length\n              }\n              color=\"secondary\"\n            >\n              <NotificationsIcon />\n            </Badge>\n          ))\n          //else return the regular notificationsIcon withOut badges\n        : (notificationsIcon = <NotificationsIcon />);\n    } else {\n      //else if you have no notifications, show notification icon\n      notificationsIcon = <NotificationsIcon />;\n    }\n    let notificationsMarkup =\n      notifications && notifications.length > 0 ? (\n        notifications.map((not) => {\n          const verb = not.type === 'like' ? 'liked' : 'commented on';\n          const time = dayjs(not.createdAt).fromNow();\n          const iconColor = not.read ? 'primary' : 'secondary';\n          const icon =\n            not.type === 'like' ? (\n              <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />\n            ) : (\n              <ChatIcon color={iconColor} style={{ marginRight: 10 }} />\n            );\n\n          return (\n            <MenuItem key={not.createdAt} onClick={this.handleClose}>\n              {icon}\n              <Typography\n                component={Link}\n                color=\"default\"\n                variant=\"body1\"\n                to={`/users/${not.recipient}/scream/${not.screamId}`}\n              >\n                {not.sender} {verb} your scream {time}\n              </Typography>\n            </MenuItem>\n          );\n        })\n      ) : (\n        <MenuItem onClick={this.handleClose}>\n          You have no notifications yet\n        </MenuItem>\n      );\n    return (\n      <Fragment>\n        <Tooltip placement=\"top\" title=\"Notifications\">\n          <IconButton\n            aria-owns={anchorEl ? 'simple-menu' : undefined}\n            aria-haspopup=\"true\"\n            onClick={this.handleOpen}\n          >\n            {notificationsIcon}\n          </IconButton>\n        </Tooltip>\n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this.handleClose}\n          onEntered={this.onMenuOpened}\n        >\n          {notificationsMarkup}\n        </Menu>\n      </Fragment>\n    );\n  }\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(mapStateToProps,{ markNotificationsRead })(Notifications);"]},"metadata":{},"sourceType":"module"}