{"ast":null,"code":"var _jsxFileName = \"/Users/Mama/Desktop/fakeTwitter/src/Pages/user.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Post from '../Components/Post/Post';\nimport StaticProfile from '../Components/Profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid'; // import ScreamSkeleton from '../Util/ScreamSkeleton';\n// import ProfileSkeleton from '../Util/ProfileSkeleton';\n\nimport { connect } from 'react-redux';\nimport { getUserData } from '../Redux/actions/dataActions';\n\nclass user extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      profile: null,\n      screamIdParam: null\n    };\n  }\n\n  //when component mounts fetch specific user data from props (handle, screamId)\n  componentDidMount() {\n    //create var to store prop values (will later be refrence)\n    const userName = this.props.match.params.userName;\n    const screamId = this.props.match.params.screamId; //add screamId to state\n\n    if (screamId) this.setState({\n      screamIdParam: screamId\n    });\n    this.props.getUserData(userName);\n    axios.get(`/user/${userName}`).then(res => {\n      this.setState({\n        profile: res.data.user\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      screams,\n      loading\n    } = this.props.data; // const { screamIdParam } = this.state;\n\n    const screamsMarkup = loading ?\n    /*#__PURE__*/\n    //If we are loading\n    // <ScreamSkeleton />\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, \"Loading data....\") //if user does not have any screams\n    : screams === null ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"No screams from this user\") //if user does have scream display screams\n    // ) : !screamIdParam ? (\n    //   screams.map((scream) => <Post key={scream.screamId} scream={scream} />)\n    //if user does have scream display screams\n    : // screams.map((scream) => {\n    //   if (scream.screamId !== screamIdParam)\n    //     return <Post key={scream.screamId} scream={scream} />;\n    //   else return <Post key={scream.screamId} scream={scream} openDialog />;\n    // })\n    screams.map(scream => /*#__PURE__*/React.createElement(Post, {\n      key: scream.screamId,\n      scream: scream,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 8,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, screamsMarkup), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 4,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, this.state.profile === null ?\n    /*#__PURE__*/\n    // <ProfileSkeleton />\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Loading Profile...\") :\n    /*#__PURE__*/\n    // if profile exist, but is not logged in user\n    React.createElement(StaticProfile, {\n      profile: this.state.profile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    })));\n  }\n\n} //needed props to workwith \n\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n}; //get data from state\n\nconst mapStateToProps = state => ({\n  data: state.data\n}); //import func getUserData with connect prop\n\n\nexport default connect(mapStateToProps, {\n  getUserData\n})(user);","map":{"version":3,"sources":["/Users/Mama/Desktop/fakeTwitter/src/Pages/user.js"],"names":["React","Component","PropTypes","axios","Post","StaticProfile","Grid","connect","getUserData","user","state","profile","screamIdParam","componentDidMount","userName","props","match","params","screamId","setState","get","then","res","data","catch","err","console","log","render","screams","loading","screamsMarkup","map","scream","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Post from '../Components/Post/Post';\nimport StaticProfile from '../Components/Profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\n\n// import ScreamSkeleton from '../Util/ScreamSkeleton';\n// import ProfileSkeleton from '../Util/ProfileSkeleton';\n\nimport { connect } from 'react-redux';\nimport { getUserData } from '../Redux/actions/dataActions';\n\nclass user extends Component {\n\n //create a new state\n  state = {\n    profile: null,\n    screamIdParam: null\n  };\n\n  //when component mounts fetch specific user data from props (handle, screamId)\n  componentDidMount() {\n    //create var to store prop values (will later be refrence)\n    const userName = this.props.match.params.userName;\n    const screamId = this.props.match.params.screamId;\n\n    //add screamId to state\n    if (screamId) this.setState({ screamIdParam: screamId });\n\n    this.props.getUserData(userName);\n\n    axios\n      .get(`/user/${userName}`)\n      .then((res) => {\n        this.setState({\n          profile: res.data.user\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n\n  render() {\n\n    const { screams, loading } = this.props.data;\n    // const { screamIdParam } = this.state;\n\n    const screamsMarkup = loading ? (\n        //If we are loading\n      // <ScreamSkeleton />\n      <p>Loading data....</p>\n      //if user does not have any screams\n    ) : screams === null ? (\n      <p>No screams from this user</p>\n      //if user does have scream display screams\n    // ) : !screamIdParam ? (\n    //   screams.map((scream) => <Post key={scream.screamId} scream={scream} />)\n      //if user does have scream display screams\n    ) : (\n      // screams.map((scream) => {\n      //   if (scream.screamId !== screamIdParam)\n      //     return <Post key={scream.screamId} scream={scream} />;\n      //   else return <Post key={scream.screamId} scream={scream} openDialog />;\n      // })\n        screams.map(scream => <Post key={scream.screamId} scream={scream} />)\n    );\n\n    return (\n      <Grid container spacing={2}>\n        <Grid item sm={8} xs={12}>\n          {screamsMarkup}\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          {/* if profile is not found */}\n          {this.state.profile === null ? (\n            // <ProfileSkeleton />\n            <p>Loading Profile...</p>\n          ) : (\n          // if profile exist, but is not logged in user\n            <StaticProfile profile={this.state.profile} />\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n//needed props to workwith \nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\n//get data from state\nconst mapStateToProps = (state) => ({\n  data: state.data\n});\n\n//import func getUserData with connect prop\nexport default connect(mapStateToProps,{ getUserData })(user);"]},"metadata":{},"sourceType":"module"}