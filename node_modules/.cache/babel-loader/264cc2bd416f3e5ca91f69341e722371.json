{"ast":null,"code":"// import React, { Component } from 'react';\n// import withStyles from '@material-ui/core/styles/withStyles';\n// import PropTypes from 'prop-types';\n// import Icon from '../Images/no-img.png';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n// import Grid from '@material-ui/core/Grid';\n// import Typography from '@material-ui/core/Typography';\n// import TextField from '@material-ui/core/TextField';\n// import Button from \"@material-ui/core/Button\";\n// import CircularProgress from '@material-ui/core/CircularProgress';\n// //import theme class from app.js page\n// const styles = (theme) => ({\n//     ...theme\n// });\n// class signup extends Component {\n//     //controled component\n//     constructor() {\n//         super();\n//         this.state = {\n//             email: '',\n//             password: '',\n//             confirmPassword: '',\n//             userName: '',\n//             loading: false,\n//             errors: {}\n//         };\n//     }\n//     //func to handle once user clicks submit\n//     handleSubmit = (event) => {\n//         //prevent user from submitting empty values\n//         event.preventDefault();\n//         //while everything is processing show loading\n//         this.setState({\n//             loading: true\n//         });\n//         //Get data before submitting\n//         const newUserData = {\n//             email: this.state.email,\n//             password: this.state.password,\n//             confirmPassword: this.state.confirmPassword,\n//             userName: this.state.userName\n//         };\n//         //call api\n//         axios.post('/signup', newUserData)\n//             .then(res => {\n//                 //if successful\n//                 console.log(res.data);\n//                 //store token locally\n//                 localStorage.setItem('FBIdToken', `Bearer ${res.data.token}`);\n//                 //set loading screen to false\n//                 this.setState({\n//                     loading: false\n//                 });\n//                 //send users to homepage\n//                 this.props.history.push('/');\n//             })\n//             .catch(err => {\n//                 //if errors, log error and set loading to false\n//                 this.setState({\n//                     errors: err.response.data,\n//                     loading: false\n//                 });\n//             });\n//     };\n//     //func to handleChnage in Textfields and get user input\n//     handleChange = (event) => {\n//         this.setState({\n//             [event.target.name]: event.target.value\n//         });\n//     };\n//     render() {\n//         //import classes\n//         const { classes } = this.props;\n//         const { errors, loading } = this.state;\n//         return (\n//             <Grid container className={classes.form}>\n//                 <Grid item sm/>\n//                 <Grid item sm>\n//                     <img src={Icon} alt=\"NewUser\" className={classes.iconImg}/>\n//                     <Typography variant=\"h2\" className={classes.pageTitle}>Signup</Typography>\n//                     <form noValidate onSubmit={this.handleSubmit} >\n//                         <TextField \n//                             id=\"userName\" \n//                             name=\"userName\" \n//                             type=\"text\" \n//                             label=\"Username\" \n//                             className={classes.textField}\n//                             helperText={errors.userName}\n//                             error={errors.userName ? true : false}\n//                             value={this.state.userName} \n//                             onChange={this.handleChange} \n//                             fullWidth \n//                         />\n//                         <TextField \n//                             id=\"email\"\n//                             name=\"email\"\n//                             type=\"email\"\n//                             label=\"Email\"\n//                             className={classes.textField}\n//                             helperText={errors.email}\n//                             error={errors.email ? true : false}\n//                             value={this.state.email}\n//                             onChange={this.handleChange}\n//                             fullWidth \n//                         />\n//                         <TextField \n//                             id=\"password\" \n//                             name=\"password\" \n//                             type=\"password\" \n//                             label=\"Password\" \n//                             className={classes.textField}\n//                             helperText={errors.password}\n//                             error={errors.password ? true : false}\n//                             value={this.state.password} \n//                             onChange={this.handleChange} \n//                             fullWidth \n//                         />\n//                         <TextField \n//                             id=\"confirmPassword\" \n//                             name=\"confirmPassword\" \n//                             type=\"password\" \n//                             label=\"Confirm Password\" \n//                             className={classes.textField}\n//                             helperText={errors.confirmPassword}\n//                             error={errors.confirmPassword ? true : false}\n//                             value={this.state.confirmPassword} \n//                             onChange={this.handleChange} \n//                             fullWidth \n//                         />\n//                         {errors.general && (\n//                             <Typography variant=\"h2\" className={classes.customError}>\n//                                 {errors.general}\n//                             </Typography>\n//                         )}\n//                         <Button \n//                             type=\"submit\" \n//                             variant=\"contained\" \n//                             color=\"primary\" \n//                             className={classes.button}\n//                             //Disable button when loading\n//                             disabled={loading}\n//                         >\n//                             Sign up\n//                             {/* Will show a loading circle after user clicks login btn */}\n//                             {loading && (\n//                                 <CircularProgress size={30} className={classes.progress}/>\n//                             )}\n//                         </Button>\n//                             {/* Text that will redirect user to creat a new account(signup) */}\n//                             <br/><br/><small>Already have an account ? Login <Link to=\"/login\">here</Link></small>\n//                     </form> \n//                 </Grid>\n//                 <Grid item sm/> \n//             </Grid>\n//         );\n//     }\n// }\n// signup.propTypes = {\n//     classes: PropTypes.object.isRequired\n// };\n// export default withStyles(styles)(signup);","map":{"version":3,"sources":["/Users/Mama/Desktop/pizza-app/src/Pages/signup.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import withStyles from '@material-ui/core/styles/withStyles';\n// import PropTypes from 'prop-types';\n// import Icon from '../Images/no-img.png';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// import Grid from '@material-ui/core/Grid';\n// import Typography from '@material-ui/core/Typography';\n// import TextField from '@material-ui/core/TextField';\n// import Button from \"@material-ui/core/Button\";\n// import CircularProgress from '@material-ui/core/CircularProgress';\n\n// //import theme class from app.js page\n// const styles = (theme) => ({\n//     ...theme\n// });\n\n\n// class signup extends Component {\n//     //controled component\n//     constructor() {\n//         super();\n//         this.state = {\n//             email: '',\n//             password: '',\n//             confirmPassword: '',\n//             userName: '',\n//             loading: false,\n//             errors: {}\n//         };\n//     }\n\n//     //func to handle once user clicks submit\n//     handleSubmit = (event) => {\n//         //prevent user from submitting empty values\n//         event.preventDefault();\n//         //while everything is processing show loading\n//         this.setState({\n//             loading: true\n//         });\n\n//         //Get data before submitting\n//         const newUserData = {\n//             email: this.state.email,\n//             password: this.state.password,\n//             confirmPassword: this.state.confirmPassword,\n//             userName: this.state.userName\n//         };\n\n//         //call api\n//         axios.post('/signup', newUserData)\n//             .then(res => {\n//                 //if successful\n//                 console.log(res.data);\n//                 //store token locally\n//                 localStorage.setItem('FBIdToken', `Bearer ${res.data.token}`);\n//                 //set loading screen to false\n//                 this.setState({\n//                     loading: false\n//                 });\n//                 //send users to homepage\n//                 this.props.history.push('/');\n//             })\n//             .catch(err => {\n//                 //if errors, log error and set loading to false\n//                 this.setState({\n//                     errors: err.response.data,\n//                     loading: false\n//                 });\n//             });\n//     };\n\n//     //func to handleChnage in Textfields and get user input\n//     handleChange = (event) => {\n//         this.setState({\n//             [event.target.name]: event.target.value\n//         });\n//     };\n\n\n//     render() {\n//         //import classes\n//         const { classes } = this.props;\n//         const { errors, loading } = this.state;\n\n//         return (\n//             <Grid container className={classes.form}>\n//                 <Grid item sm/>\n//                 <Grid item sm>\n//                     <img src={Icon} alt=\"NewUser\" className={classes.iconImg}/>\n//                     <Typography variant=\"h2\" className={classes.pageTitle}>Signup</Typography>\n//                     <form noValidate onSubmit={this.handleSubmit} >\n//                         <TextField \n//                             id=\"userName\" \n//                             name=\"userName\" \n//                             type=\"text\" \n//                             label=\"Username\" \n//                             className={classes.textField}\n//                             helperText={errors.userName}\n//                             error={errors.userName ? true : false}\n//                             value={this.state.userName} \n//                             onChange={this.handleChange} \n//                             fullWidth \n//                         />\n//                         <TextField \n//                             id=\"email\"\n//                             name=\"email\"\n//                             type=\"email\"\n//                             label=\"Email\"\n//                             className={classes.textField}\n//                             helperText={errors.email}\n//                             error={errors.email ? true : false}\n//                             value={this.state.email}\n//                             onChange={this.handleChange}\n//                             fullWidth \n//                         />\n//                         <TextField \n//                             id=\"password\" \n//                             name=\"password\" \n//                             type=\"password\" \n//                             label=\"Password\" \n//                             className={classes.textField}\n//                             helperText={errors.password}\n//                             error={errors.password ? true : false}\n//                             value={this.state.password} \n//                             onChange={this.handleChange} \n//                             fullWidth \n//                         />\n//                         <TextField \n//                             id=\"confirmPassword\" \n//                             name=\"confirmPassword\" \n//                             type=\"password\" \n//                             label=\"Confirm Password\" \n//                             className={classes.textField}\n//                             helperText={errors.confirmPassword}\n//                             error={errors.confirmPassword ? true : false}\n//                             value={this.state.confirmPassword} \n//                             onChange={this.handleChange} \n//                             fullWidth \n//                         />\n//                         {errors.general && (\n//                             <Typography variant=\"h2\" className={classes.customError}>\n//                                 {errors.general}\n//                             </Typography>\n//                         )}\n//                         <Button \n//                             type=\"submit\" \n//                             variant=\"contained\" \n//                             color=\"primary\" \n//                             className={classes.button}\n//                             //Disable button when loading\n//                             disabled={loading}\n//                         >\n//                             Sign up\n//                             {/* Will show a loading circle after user clicks login btn */}\n//                             {loading && (\n//                                 <CircularProgress size={30} className={classes.progress}/>\n//                             )}\n//                         </Button>\n//                             {/* Text that will redirect user to creat a new account(signup) */}\n//                             <br/><br/><small>Already have an account ? Login <Link to=\"/login\">here</Link></small>\n\n//                     </form> \n//                 </Grid>\n//                 <Grid item sm/> \n//             </Grid>\n//         );\n//     }\n// }\n\n// signup.propTypes = {\n//     classes: PropTypes.object.isRequired\n// };\n\n// export default withStyles(styles)(signup);"]},"metadata":{},"sourceType":"module"}