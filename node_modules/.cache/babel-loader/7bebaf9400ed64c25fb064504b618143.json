{"ast":null,"code":"var _jsxFileName = \"/Users/Mama/Desktop/fakeTwitter/src/Pages/signup.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Images/no-img.png';\nimport { Link } from 'react-router-dom';\nimport themeObject from '../Util/theme'; //MUI Stuff\n\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from '@material-ui/core/CircularProgress'; //Redux\n\nimport { connect } from 'react-redux';\nimport { signupUser } from '../Redux/actions/userActions'; //import theme class from app.js page\n\nconst styles = {\n  form: themeObject.form,\n  logoImg: themeObject.image,\n  pageTitle: themeObject.pageTitle,\n  textField: themeObject.textField,\n  button: themeObject.button,\n  customError: themeObject.customError,\n  progress: themeObject.progress\n};\n\nclass signup extends Component {\n  //controled component\n  constructor() {\n    super();\n\n    this.handleSubmit = event => {\n      //prevent user from submitting empty values\n      event.preventDefault(); //while everything is processing show loading\n\n      this.setState({\n        loading: true\n      }); //Get data before submitting\n\n      const newUserData = {\n        email: this.state.email,\n        password: this.state.password,\n        confirmPassword: this.state.confirmPassword,\n        userName: this.state.userName\n      };\n      this.props.signupUser(newUserData, this.props.history);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      userName: '',\n      errors: {}\n    };\n  } //func to recieve UI props and display errors at login, signup\n\n\n  componentWillReceiveProps(nextProps) {\n    //if we get errors, set errors to that errors object\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n  } //func to handle once user clicks submit\n\n\n  render() {\n    //import classes\n    const {\n      classes,\n      UI: {\n        loading\n      }\n    } = this.props;\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: classes.form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: Icon,\n      alt: \"NewUser\",\n      className: classes.logoImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h2\",\n      className: classes.pageTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, \"Signup\"), /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"userName\",\n      name: \"userName\",\n      type: \"text\",\n      label: \"Username\",\n      className: classes.textField,\n      helperText: errors.handle,\n      error: errors.userName ? true : false,\n      value: this.state.userName,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      className: classes.textField,\n      helperText: errors.email,\n      error: errors.email ? true : false,\n      value: this.state.email,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"password\",\n      name: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      className: classes.textField,\n      helperText: errors.password,\n      error: errors.password ? true : false,\n      value: this.state.password,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"confirmPassword\",\n      name: \"confirmPassword\",\n      type: \"password\",\n      label: \"Confirm Password\",\n      className: classes.textField,\n      helperText: errors.confirmPassword,\n      error: errors.confirmPassword ? true : false,\n      value: this.state.confirmPassword,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }), errors.general && /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h2\",\n      className: classes.customError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, errors.general), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button //Disable button when loading\n      ,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    }, \"Sign Up\", loading && /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 30,\n      className: classes.progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 39\n      }\n    }, \"Already have an account? Login \", /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 77\n      }\n    }, \"here\")))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nsignup.propTypes = {\n  classes: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired,\n  // signupUser: PropTypes.func.isRequired\n  signupUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  signupUser\n})(withStyles(styles)(signup));","map":{"version":3,"sources":["/Users/Mama/Desktop/fakeTwitter/src/Pages/signup.js"],"names":["React","Component","PropTypes","Icon","Link","themeObject","withStyles","Grid","Typography","TextField","Button","CircularProgress","connect","signupUser","styles","form","logoImg","image","pageTitle","textField","button","customError","progress","signup","constructor","handleSubmit","event","preventDefault","setState","loading","newUserData","email","state","password","confirmPassword","userName","props","history","handleChange","target","name","value","errors","componentWillReceiveProps","nextProps","UI","render","classes","handle","general","propTypes","object","isRequired","user","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Images/no-img.png';\nimport { Link } from 'react-router-dom';\nimport themeObject from '../Util/theme';\n\n//MUI Stuff\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n//Redux\nimport { connect } from 'react-redux';\nimport { signupUser } from '../Redux/actions/userActions';\n\n\n//import theme class from app.js page\nconst styles = {\n    form: themeObject.form,\n    logoImg: themeObject.image,\n    pageTitle: themeObject.pageTitle,\n    textField: themeObject.textField,\n    button: themeObject.button,\n    customError: themeObject.customError,\n    progress: themeObject.progress\n};\n\nclass signup extends Component {\n    //controled component\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            confirmPassword: '',\n            userName: '',\n            errors: {}\n        };\n    }\n\n    //func to recieve UI props and display errors at login, signup\n    componentWillReceiveProps(nextProps) {\n        //if we get errors, set errors to that errors object\n        if (nextProps.UI.errors) {\n            this.setState({ errors: nextProps.UI.errors });\n        }\n    }\n\n    //func to handle once user clicks submit\n    handleSubmit = (event) => {\n        //prevent user from submitting empty values\n        event.preventDefault();\n        //while everything is processing show loading\n        this.setState({\n            loading: true\n        });\n\n        //Get data before submitting\n        const newUserData = {\n            email: this.state.email,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword,\n            userName: this.state.userName\n        }\n\n        this.props.signupUser(newUserData, this.props.history);\n    };\n\n    //func to handleChnage in Textfields and get user input\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n\n    render() {\n        //import classes\n        const { classes, UI: { loading } } = this.props;\n        const { errors } = this.state;\n\n        return (\n            <Grid container className={classes.form}>\n                <Grid item sm/>\n                <Grid item sm>\n                    <img src={Icon} alt=\"NewUser\" className={classes.logoImg}/>\n                    <Typography variant=\"h2\" className={classes.pageTitle}>Signup</Typography>\n                    <form noValidate onSubmit={this.handleSubmit} >\n                        <TextField\n                            id=\"userName\"\n                            name=\"userName\"\n                            type=\"text\"\n                            label=\"Username\"\n                            className={classes.textField}\n                            helperText={errors.handle}\n                            error={errors.userName ? true : false}\n                            value={this.state.userName}\n                            onChange={this.handleChange}\n                            fullWidth\n                        />\n                        <TextField \n                            id=\"email\"\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            className={classes.textField}\n                            helperText={errors.email}\n                            error={errors.email ? true : false}\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                            fullWidth \n                        />\n                        <TextField \n                            id=\"password\" \n                            name=\"password\" \n                            type=\"password\" \n                            label=\"Password\" \n                            className={classes.textField}\n                            helperText={errors.password}\n                            error={errors.password ? true : false}\n                            value={this.state.password} \n                            onChange={this.handleChange} \n                            fullWidth \n                        />\n                        <TextField\n                            id=\"confirmPassword\"\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            label=\"Confirm Password\"\n                            className={classes.textField}\n                            helperText={errors.confirmPassword}\n                            error={errors.confirmPassword ? true : false}\n                            value={this.state.confirmPassword}\n                            onChange={this.handleChange}\n                            fullWidth\n                        />\n                        {errors.general && (\n                            <Typography variant=\"h2\" className={classes.customError}>\n                                {errors.general}\n                            </Typography>\n                        )}\n                        <Button \n                            type=\"submit\" \n                            variant=\"contained\" \n                            color=\"primary\" \n                            className={classes.button}\n                            //Disable button when loading\n                            disabled={loading}\n                        >\n                            Sign Up\n                            {/* Will show a loading circle after user clicks login btn */}\n                            {loading && (\n                                <CircularProgress size={30} className={classes.progress}/>\n                            )}\n                        </Button>\n                            {/* Text that will redirect user to creat a new account(signup) */}\n                            <br/><br/><small>Already have an account? Login <Link to=\"/login\">here</Link>\n                        </small>\n                    </form> \n                </Grid>\n                <Grid item sm/> \n            </Grid>\n        )\n    }\n}\n\nsignup.propTypes = {\n    classes: PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired,\n    UI: PropTypes.object.isRequired,\n    // signupUser: PropTypes.func.isRequired\n    signupUser: PropTypes.func.isRequired\n};\n  \nconst mapStateToProps = (state) => ({\n    user: state.user,\n    UI: state.UI\n});\n\nexport default connect(mapStateToProps, { signupUser } )(withStyles(styles)(signup));\n"]},"metadata":{},"sourceType":"module"}